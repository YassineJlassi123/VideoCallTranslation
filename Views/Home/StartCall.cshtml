@{
    ViewData["Title"] = "Video Call with Translation";
}

<div class="bg-background dark:bg-foreground h-screen w-full flex flex-col justify-center items-center">
    <!-- Video Container -->
    <div class="relative w-full h-full">
        <div class="absolute inset-0 flex justify-center items-center">
            <div class="w-full h-full relative">
                <div class="w-full h-full bg-card dark:bg-card-foreground flex">
                    <!-- Local Video -->
                    <div class="w-1/2 h-full relative">
                        <video id="localVideo" autoplay muted class="w-full h-full object-cover rounded-lg shadow-md"></video>
                    </div>
                    <!-- Remote Video -->
                    <div class="w-1/2 h-full relative">
                        <video id="remoteVideo" autoplay class="w-full h-full object-cover rounded-lg shadow-md"></video>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Translation Container -->
    <div class="mt-4 p-4 bg-card dark:bg-card-foreground text-center">
        <div class="mt-4 p-4 bg-card dark:bg-card-foreground text-center">
            <div id="translatedText" class="text-gray-600 dark:text-gray-300 mt-4 max-h-20 overflow-y-auto">
                <ul id="translationList"></ul>
            </div>
        </div>
        <div style="width:40vh" class="max-w-lg mx-auto p-4 bg-white dark:bg-gray-800 rounded-lg shadow-md">
            <!-- Source Language Selector -->
            <div class="mb-4">
                <label for="sourceLang" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Source Language:</label>
                <select id="sourceLang" class="mt-1 block w-full p-2 bg-input dark:bg-input border border-primary dark:border-primary rounded-md shadow-sm focus:ring focus:ring-primary">
                    <option value="en-US">English</option>
                    <option value="es-ES">Spanish</option>
                    <option value="fr-FR">French</option>
                    <option value="ar-SA">Arabic</option>
                    <option value="ar-TN">Tunisian Arabic</option>
                    <option value="ja-JP">Japanese</option>
                    <option value="ko-KR">Korean</option>
                    <option value="ru-RU">Russian</option>
                </select>
            </div>

            <!-- Target Language Selector -->
            <div class="mb-4">
                <label for="targetLang" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Target Language:</label>
                <select id="targetLang" class="mt-1 block w-full p-2 bg-input dark:bg-input border border-primary dark:border-primary rounded-md shadow-sm focus:ring focus:ring-primary">
                    <option value="es-ES">Spanish</option>
                    <option value="en-US">English</option>
                    <option value="fr-FR">French</option>
                    <option value="ar-SA">Arabic</option>
                    <option value="ar-TN">Tunisian Arabic</option>
                    <option value="ja-JP">Japanese</option>
                    <option value="ko-KR">Korean</option>
                    <option value="ru-RU">Russian</option>
                </select>
            </div>

            <!-- End Call Button -->
            <div id="controlsContainer" class="mt-4">
                <button id="endCallBtn" class="w-full bg-destructive dark:bg-destructive-foreground hover:bg-destructive/80 text-destructive-foreground flex items-center justify-center rounded-full p-4 transition-colors">
                    <i class="fas fa-phone-slash w-6 h-6"></i>
                </button>
            </div>

            <!-- Recognition Status -->
            <div id="recognitionStatus" class="text-sm text-secondary mt-2"></div>

            <!-- Translated Text -->
            
        </div>
    </div>
</div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
<script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
<script>
    const roomId = '@ViewData["RoomId"]';
    let localStream, peerConnection, recognition, audioContext, mediaStreamSource, mediaStreamDestination;
    let isListening = false;
    let isRecognitionActive = false;
    let silenceTimer;
    const silenceThreshold = 2000; // 1.5 seconds of silence to stop listening
  
    const configuration = { iceServers: [{ urls: 'stun:stun.l.google.com:19302' }] };

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/VideoCallHub")
        .build();

    async function startCall() {
        try {
            // Request only video, no audio
            localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });
            const localVideo = document.getElementById('localVideo');
            if (localVideo) {
                localVideo.srcObject = localStream;
            } else {
                console.error("Local video element not found");
                return;
            }

            peerConnection = new RTCPeerConnection(configuration);

            // Only add video tracks, no audio tracks
            localStream.getVideoTracks().forEach(track => peerConnection.addTrack(track, localStream));

            peerConnection.ontrack = (event) => {
                const remoteVideo = document.getElementById('remoteVideo');
                if (remoteVideo) {
                    remoteVideo.srcObject = event.streams[0];
                } else {
                    console.error("Remote video element not found");
                }
            };

            peerConnection.onicecandidate = (event) => {
                if (event.candidate) {
                    connection.invoke("SendIceCandidate", roomId, JSON.stringify(event.candidate));
                }
            };

            await connection.start();
            console.log('SignalR connection established.');
            await connection.invoke("JoinRoom", roomId);

            const offer = await peerConnection.createOffer();
            await peerConnection.setLocalDescription(offer);
            await connection.invoke("SendOffer", roomId, JSON.stringify(offer));

        } catch (error) {
            console.error("Error starting call:", error);
        }
    }

    function startSpeechRecognition() {
        if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
            console.error("Speech recognition not supported.");
            return;
        }

        if (isRecognitionActive) {
            console.log("Recognition is already active.");
            return;
        }

        recognition = new (window.webkitSpeechRecognition || window.SpeechRecognition)();

        recognition.continuous = true;
        recognition.interimResults = false;
        recognition.lang = document.getElementById('sourceLang').value;

        recognition.onstart = () => {
            isListening = true;
            isRecognitionActive = true;
            document.getElementById('recognitionStatus').textContent = 'Listening...';
        };

        recognition.onend = () => {
            isRecognitionActive = false;
            if (isListening) {
              
                    if (!isRecognitionActive) {
                        recognition.start();
                    }
     
            }
        };

        recognition.onresult = handleRecognitionResult;

        recognition.onerror = (event) => {
            console.error("Speech recognition error", event.error);
            document.getElementById('recognitionStatus').textContent = `Error: ${event.error}`;
            isRecognitionActive = false;
            if (event.error === 'no-speech') {
                restartRecognition();
            }
        };

        recognition.start();
    }

    async function handleRecognitionResult(event) {
        let finalTranscript = '';

        for (let i = event.resultIndex; i < event.results.length; ++i) {
            if (event.results[i].isFinal) {
                finalTranscript += event.results[i][0].transcript;
            }
        }

        if (finalTranscript) {
            resetSilenceTimer();
            const translation = await translateText(finalTranscript);
        }
    }

  

    let translationPromiseResolve = null;

    async function translateText(text) {
        const sourceLang = document.getElementById('sourceLang').value;
        const targetLang = document.getElementById('targetLang').value;

        try {
            // Create a new promise for each translation
            const translationPromise = new Promise((resolve) => {
                translationPromiseResolve = resolve;
            });

            // Use the SignalR hub's Command function
            await connection.invoke("Command", roomId, text, sourceLang, targetLang);

            // Wait for the translation to be received
            const translation = await translationPromise;
            return translation;
        } catch (error) {
            console.error("Translation error:", error);
            return `Translation failed: ${error.message}`;
        }
    }


   

    function restartRecognition() {
        if (recognition) {
            if (isRecognitionActive) {
                recognition.stop();
            }
            setTimeout(() => {
                if (!isRecognitionActive) {
                    recognition.start();
                }
            }, 50);
        }
    }

    function resetSilenceTimer() {
        clearTimeout(silenceTimer);
        silenceTimer = setTimeout(() => {
            console.log("Silence detected, restarting listening");
            restartRecognition();
        }, silenceThreshold);
    }

    function initializeApp() {
        startSpeechRecognition();
        const endCallBtn = document.getElementById('endCallBtn');
        if (endCallBtn) {
            endCallBtn.onclick = async () => {
                endCall();
                await connection.invoke("EndCall", roomId);
            };
        } else {
            console.error("End Call button not found");
        }

        const sourceLangSelect = document.getElementById('sourceLang');
        if (sourceLangSelect) {
            sourceLangSelect.onchange = () => {
                if (recognition) {
                    recognition.lang = sourceLangSelect.value;
                    restartRecognition();
                }
            };
        } else {
            console.error("Source language select not found");
        }

        startCall();
    }

    function endCall() {
        if (localStream) {
            localStream.getTracks().forEach(track => track.stop());
        }
        if (peerConnection) {
            peerConnection.close();
        }
        if (recognition) {
            recognition.stop();
        }
        isListening = false;
        isRecognitionActive = false;
        document.getElementById('recognitionStatus').textContent = 'Call ended';
    }

    document.addEventListener('DOMContentLoaded', initializeApp);

    // SignalR connection handlers
    connection.on("ReceiveOffer", async (offer) => {
        await peerConnection.setRemoteDescription(new RTCSessionDescription(JSON.parse(offer)));
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);
        await connection.invoke("SendAnswer", roomId, JSON.stringify(answer));
    });

    connection.on("ReceiveAnswer", async (answer) => {
        await peerConnection.setRemoteDescription(new RTCSessionDescription(JSON.parse(answer)));
    });

    connection.on("ReceiveIceCandidate", async (candidate) => {
        await peerConnection.addIceCandidate(new RTCIceCandidate(JSON.parse(candidate)));
    });
    const translations = []; // Store translations

    // Update the ReceiveTranslation handler
    connection.on("ReceiveTranslation", (translation, sourceLang, targetLang) => {
        translations.push(translation); // Add the new translation to the array
        displayTranslations(); // Call the function to update the UI
        if (translation && translationPromiseResolve) {
            translationPromiseResolve(translation);
            translationPromiseResolve = null; // Reset for the next translation
        }
    });

    // Function to display all translations
    function displayTranslations() {
        const translationList = document.getElementById('translationList');
        translationList.innerHTML = ''; // Clear the current list

        translations.forEach(trans => {
            const listItem = document.createElement('li');
            listItem.textContent = trans; // Set the text content of the list item
            translationList.appendChild(listItem); // Add the list item to the list
        });

        // Scroll to the bottom of the translatedText div
        const translatedText = document.getElementById('translatedText');
        translatedText.scrollTop = translatedText.scrollHeight;
    }
</script>
