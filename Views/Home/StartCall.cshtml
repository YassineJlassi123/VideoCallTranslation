@{
    ViewData["Title"] = "Video Call with Translation";
}

<h2 class="text-lg md:text-xl font-semibold text-center mb-4">Video Call with Translation</h2>

<div id="videoContainer" class="flex flex-col md:flex-row justify-center items-center mb-4">
    <video id="localVideo" autoplay muted class="w-full md:w-1/2 h-auto rounded-lg shadow-md"></video>
    <video id="remoteVideo" autoplay class="w-full md:w-1/2 h-auto rounded-lg shadow-md"></video>
</div>

<div id="translationContainer" class="max-w-lg mx-auto p-4 bg-white rounded-lg shadow-md">
    <div class="mb-4">
        <label for="sourceLang" class="block text-sm font-medium text-gray-700">Source Language:</label>
        <select id="sourceLang" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring focus:ring-primary">
            <option value="en-US">English</option>
            <option value="es-ES">Spanish</option>
            <option value="fr-FR">French</option>
            <option value="ar-SA">Arabic</option>
            <option value="ar-TN">Tunisian Arabic</option>
            <option value="ja-JP">Japanese</option>
            <option value="ko-KR">Korean</option>
            <option value="ru-RU">Russian</option>
        </select>
    </div>
    <div class="mb-4">
        <label for="targetLang" class="block text-sm font-medium text-gray-700">Target Language:</label>
        <select id="targetLang" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring focus:ring-primary">
            <option value="es-ES">Spanish</option>
            <option value="en-US">English</option>
            <option value="fr-FR">French</option>
            <option value="ar-SA">Arabic</option>
            <option value="ar-TN">Tunisian Arabic</option>
            <option value="ja-JP">Japanese</option>
            <option value="ko-KR">Korean</option>
            <option value="ru-RU">Russian</option>
        </select>
    </div>
    <div id="controlsContainer" class="mt-4 hidden">
        <button id="endCallBtn" class="w-full bg-red-500 text-white p-2 rounded-md hover:bg-red-600 transition-colors">End Call</button>
    </div>
    <div id="recognitionStatus" class="text-sm text-gray-600 mt-2"></div>
    <div id="translatedText" class="text-gray-600 mt-4"></div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
<script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>

<script>
    const roomId = '@ViewData["RoomId"]';
    let localStream, peerConnection, recognition, audioContext, mediaStreamSource, mediaStreamDestination;
    let lastRecognizedText = ""; // Initialize lastRecognizedText here

    const configuration = { iceServers: [{ urls: 'stun:stun.l.google.com:19302' }] };

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/VideoCallHub")
        .build();

    async function startCall() {
        try {
            // Request only video (audio: false)
            localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });
            document.getElementById('localVideo').srcObject = localStream;

            peerConnection = new RTCPeerConnection(configuration);

            // Add only video tracks to the peer connection
            localStream.getVideoTracks().forEach(track => peerConnection.addTrack(track, localStream));

            peerConnection.ontrack = (event) => {
                document.getElementById('remoteVideo').srcObject = event.streams[0];
            };

            peerConnection.onicecandidate = (event) => {
                if (event.candidate) {
                    connection.invoke("SendIceCandidate", roomId, JSON.stringify(event.candidate));
                }
            };

            // Start SignalR connection and join the room once connected
            await connection.start().then(async () => {
                console.log('SignalR connection established.');
                await connection.invoke("JoinRoom", roomId); // Ensure connection is ready

                const offer = await peerConnection.createOffer();
                await peerConnection.setLocalDescription(offer);
                await connection.invoke("SendOffer", roomId, JSON.stringify(offer)); // Send offer only after connection is ready

                document.getElementById('controlsContainer').classList.remove('hidden');
            }).catch((err) => {
                console.error("Error starting SignalR connection:", err);
            });

        } catch (error) {
            console.error("Error starting call:", error);
        }
    }


    function startSpeechRecognition() {
        recognition = new (window.webkitSpeechRecognition || window.SpeechRecognition)();
        if (!recognition) {
            console.error("Speech recognition not supported.");
            return;
        }

        recognition.continuous = true;
        recognition.interimResults = true;
        recognition.lang = document.getElementById('sourceLang').value;

        recognition.onstart = () => {
            document.getElementById('recognitionStatus').textContent = 'Listening...';
        };

        recognition.onresult = async (event) => {
            let finalTranscript = '';
            let interimTranscript = '';

            for (let i = event.resultIndex; i < event.results.length; ++i) {
                if (event.results[i].isFinal) {
                    finalTranscript += event.results[i][0].transcript;
                } else {
                    interimTranscript += event.results[i][0].transcript;
                }
            }

            // Display interim results but do not translate or speak them
            document.getElementById('recognitionStatus').textContent = interimTranscript;

            // Only proceed if the final transcript is different from the last recognized text
            if (finalTranscript && finalTranscript !== lastRecognizedText) {
                lastRecognizedText = finalTranscript;
                recognition.stop();

                // Translate the new text
                const translation = await translateText(finalTranscript);

                // Display the translation
                document.getElementById('translatedText').textContent = translation;
                if (translation) {
                    speakTranslation(translation);
                }
                // Speak the translation only after the final transcript
               

                // Clear final transcript so it doesn't repeat
                lastRecognizedText = '';
            }
        };

        recognition.onerror = (event) => {
            document.getElementById('recognitionStatus').textContent = `Error ${event.error}`;
        };
       

        recognition.start();
    }

    async function translateText(text) {
        const sourceLang = document.getElementById('sourceLang').value;
        const targetLang = document.getElementById('targetLang').value;

        try {
            const response = await fetch('/Home/Command', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ Text: text, SourceLang: sourceLang, TargetLang: targetLang }),
            });

            if (!response.ok) throw new Error("Network response was not ok");

            const data = await response.json();
            return data.translatedText;
        } catch (error) {
            console.error("Translation error:", error);
            return `Translation failed: ${ error.message }`;
        }
    }

    function speakTranslation(translation) {
        const utterance = new SpeechSynthesisUtterance(translation);
        utterance.lang = document.getElementById('targetLang').value;

        // Pause speech recognition on mobile devices to avoid conflicts
        if (isMobileBrowser()) {
            recognition.abort();
        }

        speechSynthesis.speak(utterance);

        utterance.onend = () => {
            console.log("Speech synthesis completed.");

            // Delay restarting speech recognition to avoid conflicts
            setTimeout(() => {
                if (!isMobileBrowser()) {
                    recognition.start(); // Restart only on desktop
                } else {
                    // If on mobile, you might want to let user manually trigger recognition again
                    recognition.start();
                }
            }, 500);  // Small delay to ensure clean restart
        };
    }

    function isMobileBrowser() {
        const userAgent = navigator.userAgent || navigator.vendor || window.opera;
        return /android|iPad|iPhone|iPod/i.test(userAgent);
    }

    // SignalR listeners
    connection.on("ReceiveOffer", async (offerString) => {
        const offer = JSON.parse(offerString);
        await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);
        await connection.invoke("SendAnswer", roomId, JSON.stringify(answer));
    });

    connection.on("ReceiveAnswer", async (answerString) => {
        const answer = JSON.parse(answerString);
        await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
    });

    connection.on("ReceiveIceCandidate", async (candidateString) => {
        const candidate = JSON.parse(candidateString);
        await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
    });

    connection.on("CallEnded", () => {
        peerConnection.close();
        peerConnection = null;
        document.getElementById('controlsContainer').classList.add('hidden');
    });
    window.onload = () => {
        startSpeechRecognition();  // Start speech recognition first
        setTimeout(startCall, 1000);  // Then start WebRTC call with a delay to give speech recognition priority
    };

    document.getElementById('endCallBtn').onclick = async () => {
        peerConnection.close();
        peerConnection = null;
        await connection.invoke("EndCall", roomId);
    };
</script> 